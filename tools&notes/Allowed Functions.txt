----- New functions ------

-readline-  char *readline (const char *prompt);
#include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>

Reads a line from the terminal and return it, using
'prompt' as a prompt*. The line returned is allocated with malloc(3) and has the
final newline removed, so only the text of the line remains.

If prompt is NULL or the empty string, no
prompt is issued.

readline returns the text of the line read.
A blank line returns the empty string.
If EOF is encountered while reading a line, and the line is empty, NULL is returned.
If an EOF is read with a non-empty line, it is treated as a newline.

More info : The GNU Readline Library and The GNU History Library

~/.inputrc : Individual readline initialization file

Readline provides commands for searching through the command history for lines containing a specified string.
There are two search modes: incremental and non-incremental.

readline offers editing capabilities while the user is entering the line.

*Prompt :

-rl_clear_history-  void clear_history(void) (**or rl_clear_history)

Clears the history stored by readline (add_history) in the history buffer.

-rl_on_new_line-  variable (flag)

A flag used to determine if the GNU Readline library should act as if the cursor is on a new line.
If the value is non-zero, readline will behave as if the cursor is at the beginning of a new line even if it isn't.
Has to be set manually (rl_on_new_line = 1), which can be useful to customize the behavior of readline.


-rl_replace_line-  void  rl_replace_line(const char *text, int clear_undo)

Used to replace the the current line of text being edited in the readline buffer with 'text'.
'clear_undo' determines if the undo history should be cleared (1) or not (0) after replacement.
Used with rl_redisplay.
Undo history refers to a feature which allows users to undo their previous edits or actions while editing a line.

-rl_redisplay-

-add_history-
-wait3- 
-wait4- 
-signal-
-sigaction-
-sigemptyset- 
-sigaddset- 
-kill- 
-getcwd- 
-chdir- 
-stat- 
-lstat- 
-fstat- 
-unlink-
-opendir- 
-readdir- 
-closedir-
-strerror- 
-isatty- 
-ttyname- 
-ttyslot- 
-ioctl-
-getenv- 
-tcsetattr- 
-tcgetattr- 
-tgetent- 
-tgetflag-
-tgetnum- 
-tgetstr- 
-tgoto- 
-tputs-

------ Review -----
 fork, wait, waitpid, execve, dup, dup2, pipe, perror

------ Already learned -----
printf, malloc, free, write, access, open, read, close, exit
